{"version":3,"sources":["../../src/index.ts","../../../src/chains/index.ts","../../../src/hardforks/index.ts"],"names":["chain","Common","prototype","_i","this"],"mappings":"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","file":"static/js/7.984dff9b.chunk.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chains_1 = require(\"./chains\");\nvar hardforks_1 = require(\"./hardforks\");\n/**\n * Common class to access chain and hardfork parameters\n */\nvar Common = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param chain String ('mainnet') or Number (1) chain\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    function Common(chain, hardfork, supportedHardforks) {\n        this._chainParams = this.setChain(chain);\n        this._hardfork = null;\n        this._supportedHardforks = supportedHardforks === undefined ? [] : supportedHardforks;\n        if (hardfork) {\n            this.setHardfork(hardfork);\n        }\n    }\n    /**\n     * Creates a Common object for a custom chain, based on a standard one. It uses all the [[Chain]]\n     * params from [[baseChain]] except the ones overridden in [[customChainParams]].\n     *\n     * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n     * chain params on.\n     * @param customChainParams The custom parameters of the chain.\n     * @param hardfork String identifier ('byzantium') for hardfork (optional)\n     * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n     */\n    Common.forCustomChain = function (baseChain, customChainParams, hardfork, supportedHardforks) {\n        var standardChainParams = Common._getChainParams(baseChain);\n        return new Common(__assign(__assign({}, standardChainParams), customChainParams), hardfork, supportedHardforks);\n    };\n    Common._getChainParams = function (chain) {\n        if (typeof chain === 'number') {\n            if (chains_1.chains['names'][chain]) {\n                return chains_1.chains[chains_1.chains['names'][chain]];\n            }\n            throw new Error(\"Chain with ID \" + chain + \" not supported\");\n        }\n        if (chains_1.chains[chain]) {\n            return chains_1.chains[chain];\n        }\n        throw new Error(\"Chain with name \" + chain + \" not supported\");\n    };\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain\n     *     representation. Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    Common.prototype.setChain = function (chain) {\n        if (typeof chain === 'number' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain);\n        }\n        else if (typeof chain === 'object') {\n            var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (var _i = 0, required_1 = required; _i < required_1.length; _i++) {\n                var param = required_1[_i];\n                if (chain[param] === undefined) {\n                    throw new Error(\"Missing required chain parameter: \" + param);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        return this._chainParams;\n    };\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier ('byzantium')\n     */\n    Common.prototype.setHardfork = function (hardfork) {\n        if (!this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        var changed = false;\n        for (var _i = 0, hardforkChanges_1 = hardforks_1.hardforks; _i < hardforkChanges_1.length; _i++) {\n            var hfChanges = hardforkChanges_1[_i];\n            if (hfChanges[0] === hardfork) {\n                this._hardfork = hardfork;\n                changed = true;\n            }\n        }\n        if (!changed) {\n            throw new Error(\"Hardfork with name \" + hardfork + \" not supported\");\n        }\n    };\n    /**\n     * Internal helper function to choose between hardfork set and hardfork provided as param\n     * @param hardfork Hardfork given to function as a parameter\n     * @returns Hardfork chosen to be used\n     */\n    Common.prototype._chooseHardfork = function (hardfork, onlySupported) {\n        onlySupported = onlySupported === undefined ? true : onlySupported;\n        if (!hardfork) {\n            if (!this._hardfork) {\n                throw new Error('Method called with neither a hardfork set nor provided by param');\n            }\n            else {\n                hardfork = this._hardfork;\n            }\n        }\n        else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n            throw new Error(\"Hardfork \" + hardfork + \" not set as supported in supportedHardforks\");\n        }\n        return hardfork;\n    };\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params\n     */\n    Common.prototype._getHardfork = function (hardfork) {\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_1 = hfs; _i < hfs_1.length; _i++) {\n            var hf = hfs_1[_i];\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        throw new Error(\"Hardfork \" + hardfork + \" not defined for chain \" + this.chainName());\n    };\n    /**\n     * Internal helper function to check if a hardfork is set to be supported by the library\n     * @param hardfork Hardfork name\n     * @returns True if hardfork is supported\n     */\n    Common.prototype._isSupportedHardfork = function (hardfork) {\n        if (this._supportedHardforks.length > 0) {\n            for (var _i = 0, _a = this._supportedHardforks; _i < _a.length; _i++) {\n                var supportedHf = _a[_i];\n                if (hardfork === supportedHf)\n                    return true;\n            }\n        }\n        else {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow', 'casper', 'sharding')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name, optional if hardfork set\n     */\n    Common.prototype.param = function (topic, name, hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        var value;\n        for (var _i = 0, hardforkChanges_2 = hardforks_1.hardforks; _i < hardforkChanges_2.length; _i++) {\n            var hfChanges = hardforkChanges_2[_i];\n            if (!hfChanges[1][topic]) {\n                throw new Error(\"Topic \" + topic + \" not defined\");\n            }\n            if (hfChanges[1][topic][name] !== undefined) {\n                value = hfChanges[1][topic][name].v;\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        if (value === undefined) {\n            throw new Error(topic + \" value for \" + name + \" not found\");\n        }\n        return value;\n    };\n    /**\n     * Returns a parameter for the hardfork active on block number\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     */\n    Common.prototype.paramByBlock = function (topic, name, blockNumber) {\n        var activeHfs = this.activeHardforks(blockNumber);\n        var hardfork = activeHfs[activeHfs.length - 1]['name'];\n        return this.param(topic, name, hardfork);\n    };\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.hardforkIsActiveOnBlock = function (hardfork, blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        var hfBlock = this.hardforkBlock(hardfork);\n        if (hfBlock !== null && blockNumber >= hfBlock)\n            return true;\n        return false;\n    };\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if HF is active on block number\n     */\n    Common.prototype.activeOnBlock = function (blockNumber, opts) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber, opts);\n    };\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    Common.prototype.hardforkGteHardfork = function (hardfork1, hardfork2, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive;\n        hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported);\n        var hardforks;\n        if (onlyActive) {\n            hardforks = this.activeHardforks(null, opts);\n        }\n        else {\n            hardforks = this.hardforks();\n        }\n        var posHf1 = -1, posHf2 = -1;\n        var index = 0;\n        for (var _i = 0, hardforks_2 = hardforks; _i < hardforks_2.length; _i++) {\n            var hf = hardforks_2[_i];\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2;\n    };\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @param opts Hardfork options\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    Common.prototype.gteHardfork = function (hardfork, opts) {\n        return this.hardforkGteHardfork(null, hardfork, opts);\n    };\n    /**\n     * Checks if given or set hardfork is active on the chain\n     * @param hardfork Hardfork name, optional if HF set\n     * @param opts Hardfork options (onlyActive unused)\n     * @returns True if hardfork is active on the chain\n     */\n    Common.prototype.hardforkIsActiveOnChain = function (hardfork, opts) {\n        opts = opts !== undefined ? opts : {};\n        var onlySupported = opts.onlySupported === undefined ? false : opts.onlySupported;\n        hardfork = this._chooseHardfork(hardfork, onlySupported);\n        for (var _i = 0, _a = this.hardforks(); _i < _a.length; _i++) {\n            var hf = _a[_i];\n            if (hf['name'] === hardfork && hf['block'] !== null)\n                return true;\n        }\n        return false;\n    };\n    /**\n     * Returns the active hardfork switches for the current chain\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Array with hardfork arrays\n     */\n    Common.prototype.activeHardforks = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = [];\n        var hfs = this.hardforks();\n        for (var _i = 0, hfs_2 = hfs; _i < hfs_2.length; _i++) {\n            var hf = hfs_2[_i];\n            if (hf['block'] === null)\n                continue;\n            if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block'])\n                break;\n            if (opts.onlySupported && !this._isSupportedHardfork(hf['name']))\n                continue;\n            activeHardforks.push(hf);\n        }\n        return activeHardforks;\n    };\n    /**\n     * Returns the latest active hardfork name for chain or block or throws if unavailable\n     * @param blockNumber up to block if provided, otherwise for the whole chain\n     * @param opts Hardfork options (onlyActive unused)\n     * @return Hardfork name\n     */\n    Common.prototype.activeHardfork = function (blockNumber, opts) {\n        opts = opts !== undefined ? opts : {};\n        var activeHardforks = this.activeHardforks(blockNumber, opts);\n        if (activeHardforks.length > 0) {\n            return activeHardforks[activeHardforks.length - 1]['name'];\n        }\n        else {\n            throw new Error(\"No (supported) active hardfork found\");\n        }\n    };\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number\n     */\n    Common.prototype.hardforkBlock = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        return this._getHardfork(hardfork)['block'];\n    };\n    /**\n     * True if block number provided is the hardfork (given or set) change block of the current chain\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     */\n    Common.prototype.isHardforkBlock = function (blockNumber, hardfork) {\n        hardfork = this._chooseHardfork(hardfork, false);\n        if (this.hardforkBlock(hardfork) === blockNumber) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Provide the consensus type for the hardfork set or provided as param\n     * @param hardfork Hardfork name, optional if hardfork set\n     * @returns Consensus type (e.g. 'pow', 'poa')\n     */\n    Common.prototype.consensus = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['consensus'];\n    };\n    /**\n     * Provide the finality type for the hardfork set or provided as param\n     * @param {String} hardfork Hardfork name, optional if hardfork set\n     * @returns {String} Finality type (e.g. 'pos', null of no finality)\n     */\n    Common.prototype.finality = function (hardfork) {\n        hardfork = this._chooseHardfork(hardfork);\n        return this._getHardfork(hardfork)['finality'];\n    };\n    /**\n     * Returns the Genesis parameters of current chain\n     * @returns Genesis dictionary\n     */\n    Common.prototype.genesis = function () {\n        return this._chainParams['genesis'];\n    };\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    Common.prototype.hardforks = function () {\n        return this._chainParams['hardforks'];\n    };\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    Common.prototype.bootstrapNodes = function () {\n        return this._chainParams['bootstrapNodes'];\n    };\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    Common.prototype.hardfork = function () {\n        return this._hardfork;\n    };\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    Common.prototype.chainId = function () {\n        return this._chainParams['chainId'];\n    };\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    Common.prototype.chainName = function () {\n        return chains_1.chains['names'][this.chainId()] || this._chainParams['name'];\n    };\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    Common.prototype.networkId = function () {\n        return this._chainParams['networkId'];\n    };\n    return Common;\n}());\nexports.default = Common;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chains = void 0;\nexports.chains = {\n    names: {\n        '1': 'mainnet',\n        '3': 'ropsten',\n        '4': 'rinkeby',\n        '42': 'kovan',\n        '5': 'goerli',\n    },\n    mainnet: require('./mainnet.json'),\n    ropsten: require('./ropsten.json'),\n    rinkeby: require('./rinkeby.json'),\n    kovan: require('./kovan.json'),\n    goerli: require('./goerli.json'),\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforks = void 0;\nexports.hardforks = [\n    ['chainstart', require('./chainstart.json')],\n    ['homestead', require('./homestead.json')],\n    ['dao', require('./dao.json')],\n    ['tangerineWhistle', require('./tangerineWhistle.json')],\n    ['spuriousDragon', require('./spuriousDragon.json')],\n    ['byzantium', require('./byzantium.json')],\n    ['constantinople', require('./constantinople.json')],\n    ['petersburg', require('./petersburg.json')],\n    ['istanbul', require('./istanbul.json')],\n    ['muirGlacier', require('./muirGlacier.json')],\n];\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}